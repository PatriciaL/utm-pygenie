import streamlit as st
import pandas as pd
from urllib.parse import urlparse, parse_qs

# ---------- Configuraci√≥n de la p√°gina ----------
st.set_page_config(page_title="Validador de URLs UTM", layout="centered")
st.title("üìÇ Validador de URLs con UTM")

st.markdown("Este m√≥dulo permite verificar si tus URLs tienen los par√°metros UTM requeridos y est√°n bien formateadas. "
            "Puedes validar una URL manualmente o subir un archivo CSV/Excel con muchas URLs para analizarlas.")

# ---------- 1. Validaci√≥n individual ----------
st.subheader("‚úçÔ∏è Validar una URL individual")

single_url = st.text_input("Pega una URL aqu√≠")

if single_url:
    parsed = urlparse(single_url)
    query = parse_qs(parsed.query)
    missing = [p for p in ["utm_source", "utm_medium", "utm_campaign"] if p not in query]

    if missing:
        st.error(f"‚ùå Faltan par√°metros obligatorios: {', '.join(missing)}")
    elif " " in single_url:
        st.warning("‚ö†Ô∏è La URL contiene espacios. Intenta codificarlos o usar guiones bajos.")
    else:
        st.success("‚úÖ URL v√°lida. Todos los par√°metros UTM est√°n presentes.")
        st.code(single_url)

# ---------- 2. Archivo de ejemplo ----------
st.markdown("### üìÑ ¬øNo tienes un archivo? Descarga uno de ejemplo para probar:")

try:
    with open("app/data/utm_urls_ejemplo.csv", "rb") as file:
        st.download_button("üì• Descargar CSV de ejemplo", file, file_name="utm_urls_ejemplo.csv", mime="text/csv")
except FileNotFoundError:
    st.warning("‚ö†Ô∏è Archivo de ejemplo no encontrado en 'app/data/'. Aseg√∫rate de que el archivo existe.")

# ---------- 3. Validaci√≥n por archivo ----------
st.subheader("üì§ Validar URLs desde archivo (CSV o Excel)")

uploaded_file = st.file_uploader("Sube un archivo con una columna llamada 'url'", type=["csv", "xlsx"])

if uploaded_file:
    try:
        if uploaded_file.name.endswith(".csv"):
            df = pd.read_csv(uploaded_file)
        else:
            df = pd.read_excel(uploaded_file)

        if "url" not in df.columns:
            st.error("‚ùå El archivo debe contener una columna llamada 'url'.")
        else:
            results = []
            for i, row in df.iterrows():
                url = row["url"]
                parsed = urlparse(str(url))
                query = parse_qs(parsed.query)
                errors = []

                # Validaciones
                if not parsed.scheme.startswith("http"):
                    errors.append("URL inv√°lida o sin http(s)")

                for param in ["utm_source", "utm_medium", "utm_campaign"]:
                    if param not in query:
                        errors.append(f"Falta {param}")

                if " " in str(url):
                    errors.append("Contiene espacios")

                results.append({
                    "url": url,
                    "estado": "‚úÖ Correcta" if not errors else "‚ùå Error",
                    "detalles": "; ".join(errors) if errors else "OK"
                })

            result_df = pd.DataFrame(results)
            st.markdown("### ‚úÖ Resultado de la validaci√≥n")
            st.dataframe(result_df, use_container_width=True)

            # Bot√≥n para descargar archivo corregido
            csv_out = result_df.to_csv(index=False).encode()
            st.download_button(
                label="üì• Descargar reporte corregido",
                data=csv_out,
                file_name="reporte_validado.csv",
                mime="text/csv"
            )

    except Exception as e:
        st.error(f"Ocurri√≥ un error al procesar el archivo: {str(e)}")
